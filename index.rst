

.. toctree::
   :glob:
   :hidden:

   *

.. _intro:

=====================================
¬øQu√© hay de nuevo en **Python 3.11**?
=====================================

.. image:: images/python-logo.*
  :width: 200

.. Hola a todos.


üëã
==

.. Hac√≠a mucho que no nos reun√≠amos para celebrar un meetup Python M√°laga.


Marzo 2020
----------

.. La √∫ltima vez fue el 4 de marzo de 2020. Mes que muchos recordar√©is.


Estamos de vuelta
-----------------

.. code-block:: python

    >>> import datetime
    >>> import humanize
    >>> delta = datetime.datetime(2022, 10, 27) - datetime.datetime(2020, 3, 4)
    >>> humanize.i18n.activate("es_ES")
    >>> print(repr(humanize.precisedelta(delta)))
    "2 a√±os, 7 meses y 23 d√≠as"


.. Pero ya estamos aqu√≠. 2 a√±os, 7 meses y 23 d√≠as despu√©s.


Python **M√°laga**
-----------------

.. image:: images/python-malaga-logo.*


.. Y quiero agradecer tanto a Python M√°laga como a Codespace por cedernos este espacio, por la oportunidad de estar
   aqu√≠ todos juntos de nuevo. Gracias.

.. _sobre-mi:


Sobre m√≠ **Nekmo**
------------------

+------------------------------------+
|                                    |
| .. image:: images/cara.svg         |
|   :width: 200px                    |
|                                    |
| *Programando en Python desde 2006* |
|                                    |
+------------------------------------+

.. Pero bueno, dejad de que me presente. Soy Juan Jos√©, m√°s conocido en redes como Nekmo, y llevo programando en
   Python m√°s de media vida.


Python 2.5
----------

.. Mi primera versi√≥n de Python fue la 2.5. Han pasado ya muchos a√±os, y con cada nueva versi√≥n no
   dejan de traer novedades.


¬øQu√© hay de nuevo en Python 3.11?
=================================

.. Ahora, ¬øqu√© hay de nuevo en Python 3.11?


Listado cambios
---------------

* **PEP 654:** Exception Groups y except*.
* **PEP 678:** Enriquecer excepciones con notas.
* **PEP 680:** tomllib.
* **PEP 657:** Mejoras en las indicaciones de error en los tracebacks.
* Opci√≥n ``-P`` en la l√≠nea de comandos y variable de entorno ``PYTHONSAFEPATH``.
* **PEP 646:** Variadic Generics.
* **PEP 655:** TypedDict Required/NotRequired.
* **PEP 673:** Tipo Self.
* **PEP 675:** Tipo de cadena literal arbitraria
* **PEP 681:** Data Class Transforms
* M√≥dulos obsoletos (PEP 594),  Py_UNICODE API eliminada (PEP 624) y macros convertidas a funciones est√°ticas en l√≠nea
  (PEP 670).


.. Pues este ser√≠a el listado de todos los cambios, los cuales se pueden consultar en la web oficial de Python.
   El m√°s importante son los exception groups para agrupar excepciones, mejoras en los tracebacks, el nuevo m√≥dulo
   tomllib y novedades en el tipado.

Gracias
-------

.. Y hasta aqu√≠ la charla. Muchas gracias a todos por venir. (PAUSA) Ahora en serio, vamos a ir viendo cada uno de
   estos cambios, aunque me tendr√© que detener bastante en el primero de ellos porque es el m√°s importante y m√°s
   interesante.

PEP 654: Exception Groups y except*
===================================

.. La primera de estas novedades son los exception groups y el nuevo except* con asterisco, con PEP 654.


.. revealjs_break::
    :notitle:


.. code-block:: python

    class NameError(Exception):
        pass


    def validate_name(value: str) -> None:
        if not value.istitle():
            raise NameError("El nombre debe empezar por may√∫scula.")


    form = {"name": "nekmo"}
    try:
        validate_name(form["name"])
    except NameError as err:
        print(err)  # Salta el error

.. Aqu√≠ tenemos una excepci√≥n tradicional de Python, a lo cual lo normal es lanzar una √∫nica excepci√≥n y capturarla.
   En la funci√≥n validamos la entrada, y si no valida se lanza una excepci√≥n, la cual se captura en el except y
   se muestra por pantalla.

.. revealjs_break::
    :notitle:


.. image:: images/validacion-formulario.png

.. Pero en nuestro caso tenemos un formulario. Un formulario en el que nuestro usuario comete varios errores, y
   queremos mostrarle al usuario todos los errores de golpe, no excepci√≥n por excepci√≥n. Necesitamos agruparlos.

.. revealjs_break::
    :notitle:

.. code-block:: python

    from typing import Iterable, Tuple, Dict, Callable


    class NumberError(Exception):
        pass


    def validate_age(value: str) -> None:
        if not value.isdigit():
            raise NumberError("La edad debe ser un valor num√©rico.")


    form = {"name": "nekmo", "age": "diez"}
    form_validations = [("name", validate_name), ("age", validate_age)]
    exceptions = []

    for form_key, input_validation in input_validations:
        try:
            input_validation(form[form_key])
        except Exception as err:
            exceptions.append(value)
    if exceptions:
        raise ExceptionGroup("errors message", exceptions)


.. En este segundo ejemplo iteramos sobre todos los valores del formulario, aplicamos su validaci√≥n y si hay un
   error lo a√±adimos al listado de excepciones. Si hay errores lanzamos el ExceptionGroup con sus exceptions.

.. revealjs_break::
    :notitle:

.. image:: images/json.png


.. Esto como os imaginar√©is es muy √∫til en casos como un JSON, o cuando nos vienen varios datos de entrada a validar,
   como en el ejemplo del formulario. Pero claro, os estar√©is preguntando. ¬øPara qu√© esto si s√≥lo es crear un listado
   de excepciones con un nuevo tipo de excepci√≥n?

except*
-------

.. La verdadera novedad  comienza usando el nuevo except con asterisco.

.. revealjs_break::
    :notitle:

.. code-block:: python

    try:
        read_inputs()
    except* NameError as eg:
        # Si hay errores NameError esto se llama
        print(f"Errores en el nombre: {eg.exceptions}")
    except* NumberError as eg:
        # Y si hay errores NumberError, esto tambi√©n
        print(f"Errores num√©ricos: {eg.exceptions}")

.. Podemos utilizarlo para capturar m√∫ltiples exceptiones agrupadas diferenciadas por tipo. Y lo que es mejor, a
   diferencia de lo habital que es que el except no contin√∫e ante la primera coincidencia, con el except con aster√≠sco
   s√≠ que sigue. (LEER EJEMPLO).

.. revealjs_break::
    :notitle:

.. code-block:: python

    raise ExceptionGroup("nested",
        [
             ValueError(654),
             ExceptionGroup("imports",
                 [
                     ImportError("no_such_module"),
                     ModuleNotFoundError("another_module"),
                 ]
             ),
             TypeError("int"),
         ]

.. Por si fuese poco, tambi√©n podemos meter excepciones dentro de otras. Esto es especialmente √∫til en casos como un
   JSON, en que tenemos m√∫ltiples niveles. Tambi√©n es √∫til en ejecuci√≥n as√≠ncrona, en que varias funciones lanzan a
   su vez varias excepciones. Justamente algo similar al ExceptionGroup lo ten√≠a Trio con el MultiError,
   aunque ahora lo tenemos de serie.


¬°Continuamos!
=============

.. revealjs_section::
    :data-background-color: #000000
    :data-background-image: _static/applause.gif

.. No os preocup√©is, esto era lo gordo. Lo que viene son cambios m√°s peque√±os, pero muchos muy interesantes.

PEP 678: Enriquecer excepciones con notas
=========================================

.. Y seguimos con excepciones. El nuevo m√©todo PEP 678 permite a√±adir notas, aclaraciones, a las excepciones que se
   lanzan.

.. revealjs_break::
    :notitle:

.. code-block:: python

    try:
         raise TypeError('bad type')
    except Exception as e:
         e.add_note('¬°Ah, ah, ah! ¬°No has dicho la palabra m√°gica!')
         raise

.. En este ejemplo se a√±ade produce una excepci√≥n, se captura, se le a√±ade una nota usando el nuevo m√©todo add_note,
   disponible en Exception, y se vuelve a lanzar ya con la nota.

.. revealjs_break::
    :notitle:

.. code-block:: python

    Traceback (most recent call last):
      File "<stdin>", line 2, in <module>
    TypeError: bad type
    Add some information

.. Y cuando se produce la excepci√≥n, la nota es mostrada en una segunda l√≠nea. As√≠ se simple. Genial para aclaraciones y
   otras anotaciones.

.. revealjs_break::
    :notitle:

.. code-block:: python

    + Exception Group Traceback (most recent call last):
    |   File "test.py", line 4, in test
    |     def test(x):
    |
    |   File "hypothesis/core.py", line 1202, in wrapped_test
    |     raise the_error_hypothesis_found
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    | ExceptionGroup: Hypothesis found 2 distinct failures.
    +-+---------------- 1 ----------------
        | Traceback (most recent call last):
        |   File "test.py", line 6, in test
        |     assert x > 0
        |     ^^^^^^^^^^^^
        | AssertionError: assert -1 > 0
        |
        | Falsifying example: test(
        |     x=-1,
        | )
        +---------------- 2 ----------------
        | Traceback (most recent call last):
        |   File "test.py", line 5, in test
        |     assert x < 0
        |     ^^^^^^^^^^^^
        | AssertionError: assert 0 < 0
        |
        | Falsifying example: test(
        |     x=0,
        | )
        +------------------------------------


.. Y por supuesto, esto tambi√©n puede utilizarse con los ExceptionGroup - Ya veis lo que me gustan - de forma que
   a√±adimos informaci√≥n adicional sobre la parte del exception group en que ha sucedido. Y de paso, ¬°ahora pod√©is
   conseguir que vuestros tracebacks den miedo! Como este de aqu√≠.


PEP 657: Mejoras en las indicaciones de error en los tracebacks
===============================================================

.. Y seguimos con tracebacks de error. Vamos a ver las mejoras que se han hecho en los mensaje de traceback.


.. revealjs_break::
    :notitle:


.. code-block:: python

    Traceback (most recent call last):
      File "distance.py", line 11, in <module>
        print(manhattan_distance(p1, p2))
      File "distance.py", line 6, in manhattan_distance
        return abs(point_1.x - point_2.x) + abs(point_1.y - point_2.y)
    AttributeError: 'NoneType' object has no attribute 'x'

.. Hasta ahora en Python, como recordar√©is lo habitual cuando hay varias variables en una sola l√≠nea y una de ellas es
   None, la √∫nica forma de encontrar la que provocaba el error era ponerse a depurar, porque el error no da bastante
   informaci√≥n.

.. revealjs_break::
    :notitle:


.. code-block:: python

    Traceback (most recent call last):
      File "distance.py", line 11, in <module>
        print(manhattan_distance(p1, p2))
              ^^^^^^^^^^^^^^^^^^^^^^^^^^
      File "distance.py", line 6, in manhattan_distance
        return abs(point_1.x - point_2.x) + abs(point_1.y - point_2.y)
                               ^^^^^^^^^
    AttributeError: 'NoneType' object has no attribute 'x'

.. Pero ahora con Python 3.11, ¬°ya no hace falta depurar! Porque ahora tienes flechitas que te indican lo que es un
   None. Y no hay nada m√°s f√°cil que seguir flechitas que indican lo que tienes que arreglar, ¬øno?

.. revealjs_break::
    :notitle:

.. code-block:: python

    Traceback (most recent call last):
      File "query.py", line 37, in <module>
        magic_arithmetic('foo')
      File "query.py", line 18, in magic_arithmetic
        return add_counts(x) / 25
               ^^^^^^^^^^^^^
      File "query.py", line 24, in add_counts
        return 25 + query_user(user1) + query_user(user2)
                    ^^^^^^^^^^^^^^^^^
      File "query.py", line 32, in query_user
        return 1 + query_count(db, response['a']['b']['c']['user'], retry=True)
                                   ~~~~~~~~~~~~~~~~~~^^^^^
    TypeError: 'NoneType' object is not subscriptable

.. Y el caso en que esto me ha parecido m√°s √∫til es accediendo a diccionarios. Seguro que os ha pasado alguna vez
   acceder a un diccionario dentro de otro dentro de otro, y que a partir de cierto punto sea un None y no saber en
   qu√© nivel ocurre. Pues ahora se te indica. Con flechitas. ¬øQu√© m√°s podemos pedir?

PEP 680: Tomllib
================

.. Y ahora, algo completamente diferente. Tenemos un nuevo m√≥dulo en la biblioteca est√°ndar, Tomlib. ¬øPero qu√© significa
   TOML?

.. revealjs_break::
    :notitle:

Tom's Obvious, Minimal Language
-------------------------------

.. Pues obviamente, Tom's Obvious Minimal Language. ¬øY por qu√© Tom?

.. revealjs_break::
    :notitle:

.. image:: images/tom.png

.. Algunos ya os lo habr√©is imaginado, pero es como se llama el creador de este lenguaje. Un poco egoc√©ntrico pensar√©is.
   Pero si le veis tan feliz es por una buena raz√≥n: es el fundador de Github, ahora millonario.

.. revealjs_break::
    :notitle:

.. code-block:: toml

    # This is a TOML document

    title = "TOML Example"

    [owner]
    name = "Tom Preston-Werner"
    dob = 1979-05-27T07:32:00-08:00

    [database]
    enabled = true
    ports = [ 8000, 8001, 8002 ]
    data = [ ["delta", "phi"], [3.14] ]
    temp_targets = { cpu = 79.5, case = 72.0 }

    [servers]

    [servers.alpha]
    ip = "10.0.0.1"
    role = "frontend"

.. Pero vayamos a lo que nos importa. Toml es un formato de archivo de configuraci√≥n sencillo de entender y de editar
   por un humano, a diferencia de JSON. Solventa algunos de los problemas de Yaml como su falta de consistencia y
   ofrece m√°s caracter√≠sticas que los ficheros ini en los que se basa.

.. revealjs_break::
    :notitle:

.. code-block:: python

    import tomllib


    with open("fichero.toml") as f:
        tomllib.load(f)


.. Leer un fichero toml es muy sencillo, muy similar a como se hace con el m√≥dulo de json. No obstante, curiosamente
   no disponemos de un m√©todo de hacer un dump, por lo que no podemos escribir.


Novedades en el tipado
======================

.. Y ahora, llega la secci√≥n favorita para los **tipos** que les gustan los *tipos*.

.. revealjs_break::
    :notitle:

.. image:: images/badum.png

.. No me lo teng√°is en cuenta, por favor.


PEP 646: Variadic Generics
==========================

.. Comenzamos con una novedad en el tipado de los generics, que nos permite tener tipados de salida en los m√©todos en
   funci√≥n de c√≥mo se defina para nuestra clase. Esta caracter√≠stica es interesante para m√≥dulos como TensorFlow, aunque
   para el p√∫blico general tiene pocos usos.

.. revealjs_break::
    :notitle:

.. code-block:: python

    from typing import Tuple, Generic, TypeVarTuple, TypeVar


    T = TypeVar('T')
    Ts = TypeVarTuple('Ts')  # Esta es la novedad


    class Array(Generic[*Ts]):  # Aqu√≠ usamos el TypeVarTuple como definici√≥n para el tipo
        def multiply(self, x: int) -> Tuple[*Ts]:  # Y aqu√≠ como return
            ...

        def add_dimension(self, t: T) -> Tuple[T, *Ts]:
            ...


    my_array: Array[float, int, str] = Array()  # Ts en este caso ser√° [float, int, str]
    my_array.multiply(2)  # El tipo devuelto ser√° Tuple[float, int, str]
    my_array.add_dimension("spam")  # El tipo devuelto ser√° Tuple[str, float, int, str]

.. Bien, aqu√≠ tenemos nuestra propia clase Array, la cual puede recibir una definici√≥n de tipos cualesquiera llamada Ts,
   la cual usa el nuevo TypeVarTuple. Como podemos ver, multiply devuelve estos mismos valores de entrada, y
   add_dimension permite a√±adir un par√°metro adicional.


.. revealjs_break::
    :notitle:
    :data-background-color: #000000
    :data-background-image: _static/confused.gif


.. Esto puede parecer complicado, porque es complicado. Es un caso poco utilizado que es √∫til en ciertas bibliotecas de
   uso cient√≠fico y que pueden requerir de vectores.


PEP 655: TypedDict Required/NotRequired
=======================================

.. Seguimos con una novedad muy importante TypedDict, de mis cosas favoritas en el tipado. La posibilidad de marcar
   claves como no requeridas de forma m√°s f√°cil.

.. revealjs_break::
    :notitle:

.. code-block:: python

    from typing import TypedDict


    class Person(TypedDict, total=False):
        name: str  # Queremos que sea obligatorio pero no lo es
        surname: str  # Queremos que sea obligatorio pero no lo es
        age: int

    person: Person = {"name": "Juan", "surname": "Luna"}


.. Hasta ahora, la √∫nica forma de marcar claves como no requeridas era decir si la *totalidad* de las claves deben ser
   requeridas, o ninguna era requerida. Pero no se pod√≠an marcar una por una como requerida o no. Para ello ten√≠amos el
   total.

.. revealjs_break::
    :notitle:


.. code-block:: python

    from typing import TypedDict


    class PersonRequired(TypedDict, total=True):
        name: str
        surname: str


    class Person(PersonRequired, total=False):
        age: int

    person: Person = {"name": "Juan", "surname": "Luna"}

.. Si quer√≠amos que una clave sea requerida pero otras no, hasta ahora la √∫nica manera era hacer dos clases distintas,
   y definir en cada una de ellas si el total es True o False.

.. revealjs_break::
    :notitle:

.. code-block:: python

    from typing import NotRequired, Required, TypedDict


    class Person(TypedDict):  # total=True por defecto
        name: str
        surname: str
        age: NotRequired[int]  # age no ser√° requerido por el NotRequired[]


    person: Person = {"name": "Juan", "surname": "Luna"}

.. Lo que trae nuevo este nuevo PEP con los nuevos Required y NotRequired, que permiten definir claves requeridas o
   no requeridas. En este caso todo el requerido salvo el age, que lo marcamos como no requerido.

.. revealjs_break::
    :notitle:

.. code-block:: python

    from typing import NotRequired, Required, TypedDict


    class Person(TypedDict, total=False):
        name: Required[str]
        surname: Required[str]
        age: int


    person: Person = {"name": "Juan", "surname": "Luna"}

.. Tambi√©n podemos hacerlo al rev√©s, marcando todo como como no requerido con el total False, y marcar uno por uno como
   requerido.

.. revealjs_break::
    :notitle:
    :data-background-color: #000000
    :data-background-image: _static/thumb.gif


.. Como veis, ahora es mucho m√°s f√°cil y requiere escribir menos c√≥digo. Y tener que escribir menos c√≥digo siempre es
   bien.


PEP 673: Tipo Self
==================

.. Self nos sirve para a√±adir de forma sencilla la forma de anotar que un m√©todo devuelve una instancia de la misma
   clase. Antes pod√≠amos hacer un apa√±o con los generics, pero esta forma es m√°s sencilla y encima evitamos problemas
   de dependencias circulares.

.. revealjs_break::
    :notitle:


.. code-block:: python

    from typing import Self


    class Customer:

        def __init__(self, name: str, age: int):
            self.name = name
            self.age = age

        def __copy__(self) -> Self:
            return self.__class__(self.name, self.age)

.. En este ejemplo tenemos un m√©todo copy que devuelve una nueva instancia de Customer. En vez de usar gen√©ricos o
   decir que se devuelve la misma clase, podemos usar el nuevo Self. Mucho m√°s sencillo.


PEP 675: LiteralString
======================

.. El nuevo tipo LiteralString est√° hecho pensando en la seguridad, para evitar fallos de seguridad como un SQL
   Injection.

.. revealjs_break::
    :notitle:


.. code-block:: python

    from typing import LiteralString, Iterable, Any


    def execute(sql: LiteralString, *params: Iterable[Any]):
        ...

   # Esta l√≠nea validar√°, porque pasamos los par√°metros de forma segura
   execute("SELECT * FROM data WHERE user_id = ?", [123])

   # Esta l√≠nea dar√° error, porque se modifica el string de entrada previamente
   execute(f"SELECT * FROM data WHERE user_id = {user_id}")  # MEEH! Error.

.. Usando LiteralString, el string de entrada tendr√° que venir tal cual sin manipular tal y como viene en el c√≥digo
   fuente. En el primer ejemplo validar√° porque no se modifica, pero en el segundo al haber una manipulaci√≥n, al no
   venir tal cual est√° en el c√≥digo fuente, dar√° un error en el tipado. Como veis este √∫ltimo caso ser√≠a un SQL
   Injection de manual.


M√°s seguridad
-------------

.. revealjs_section::
    :data-background-color: #000000
    :data-background-image: _static/security.gif


.. Como veis, con los tipos no s√≥lo pod√©is evitar problemas de programaci√≥n t√≠picos, sino tambi√©n evitar fallos de
   seguridad en vuestras aplicaciones.


PEP 681: Data Class Transforms
==============================

.. Este PEP es interesante para los creadores de frameworks y bibliotecas, como pueden ser Django, Pydantic o
   SQLAlchemy.

.. revealjs_break::
    :notitle:

.. code-block:: python

    # La clase ``ModelBase`` est√° definida en la biblioteca.
    @typing.dataclass_transform()
    class ModelBase: ...


    # La clase ``ModelBase`` puede ser usado para crear nuevos modelos,
    # similar a como se hace en estos frameworks.
    class CustomerModel(ModelBase):
        id: int

.. Estas bibliotecas han creado sus propias clases para crear modelos, similares a los dataclass de Python. Ahora
   tienen una forma de definir un tipado para sus clases base, para indicar que √©stas se comportar√°n como un dataclass
   de Python.

.. revealjs_break::
    :notitle:

.. code-block:: python

    def dataclass_transform(
        *,
        eq_default: bool = True,
        order_default: bool = False,
        kw_only_default: bool = False,
        field_specifiers: tuple[type | Callable[..., Any], ...] = (),
        **kwargs: Any,
    ) -> Callable[[_T], _T]: ...

.. Por defecto el nuevo tipo se comportar√° como un dataclass al ser identificado como tipo, aunque usando la funci√≥n
   dataclass_transform pueden cambiarse las opciones por defecto hacer la transformaci√≥n. En conclusi√≥n, este tipado es
   √∫til si se est√° creando un modelo de clases similares a los dataclass.

¬øQu√© otras novedades hay?
=========================

* Nuevo argumento ``-P`` en la l√≠nea de comandos y variable de entorno ``PYTHONSAFEPATH`` para
  **evitar ejecutar c√≥digo inseguro**.
* **PEP 594**: Eliminar m√≥dulos muertos de la librer√≠a est√°ndar (deprecated, a eliminar en 3.13).
* **PEP 624**: Eliminadas las APIs de codificaci√≥n de Py_UNICODE.
* **PEP 670**: Convertir macros a funciones en la API en C de Python.
* **¬°Y es m√°s r√°pido!** (10-60% respecto Python 3.10).


.. ¬øY qu√© otras novedades hay? Tenemos... (leer puntos).

M√°s informaci√≥n
===============

https://docs.python.org/3.11/whatsnew/3.11.html

.. En la web oficial de Python pod√©is encontrar el detalle sobre todas estas novedades. Pod√©is o bien copiar esta URL,
   o buscarlo en Google y os saldr√° de lo primero.

¬øC√≥mo puedo conseguirlo?
========================
**¬°¬°Ya disponible!!**

.. ¬øY c√≥mo puedes conseguirlo? Pues bien, ¬°ya est√° disponible! Python 3.11 sali√≥ literalmente hace dos d√≠as. Pod√©is
   bajarlo desde la web de Python, desde vuestra distribuci√≥n si ya lo tuviese o compil√°ndolo desde los fuentes.

¬øDesde los fuentes?
-------------------

https://www.build-python-from-source.com/

.. Si quer√©is compilarlo desde los fuentes en esta web dispon√©is de una ayuda sobre c√≥mo hacerlo. No hace falta tener
   grandes conocimientos t√©cnicos.

Python te necesita
------------------

.. revealjs_section::
    :data-background-color: #ffffff
    :data-background-size: contain
    :data-background-image: _static/sam.png

.. Y recordad, que pod√©is ir probando las nuevas versiones de Python antes de su fecha de lanzamiento oficial. Tras la
   primera beta no suele haber importantes cambios y prob√°ndolas y d√°ndoles soporte permit√≠s encontrar fallos en el
   int√©rprete antes de su d√≠a de salida. Os animo encarecidamente a hacerlo.

¬°Muchas gracias!
================

**Referencias**

* `Qu√© hay de nuevo en Python 3.11 (doc oficial) <https://docs.python.org/3.11/whatsnew/3.11.html>`_.
* `Preview exception groups (Real Python) <https://realpython.com/python311-exception-groups/>`_.
* `Python variadic generics (Anthony Explains) <https://www.youtube.com/watch?v=hAj3nGzeSiQ>`_.

.. Y hasta aqu√≠ la presentaci√≥n. Os agradezco a todos por venir, y aqu√≠ os dejo algunas referencias utilizadas en
   esta presentaci√≥n.

¬øY la presentaci√≥n?
-------------------

.. revealjs_section::
    :data-transition: zoom

`github:Nekmo/python311-presentacion <https://github.com/Nekmo/python311-presentacion>`_

.. Adem√°s de a la presentaci√≥n, por si quer√©is volver a verla.

.. revealjs_break::
    :data-background-color: #ffffff
    :data-background-size: contain
    :data-background-image: _static/qr.png
    :notitle:


.. Adem√°s aqu√≠ la ten√©is en forma de QR por si os es m√°s c√≥modo, para no tener ni que escribir.

Contactar
---------

* **Sitio web:** `nekmo.com <https://nekmo.com>`_
* **Email:** `contacto@nekmo.com <mailto:contacto@nekmo.com>`_
* **Twitter:** `@nekmocom <https://twitter.com/nekmocom>`_
* **Telegram:** `@nekmo <https://t.me/nekmo>`_
* **Jabber:** `nekmo@nekmo.org <xmpp://nekmo@nekmo.org>`_


.. Finalmente, tambi√©n ten√©is mi sitio web (ejem ejem spam) en esta diapositiva. Adem√°s de mi email. Y Twitter.
   Aunque apenas escriba en Twitter. Y ante todo, ¬°muchas gracias a todos! ¬øAlguna pregunta?
